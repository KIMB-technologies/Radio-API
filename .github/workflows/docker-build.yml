name: Docker Image Push (for tags and on base image update)

on:
  push:
    tags:
      - '*'
  schedule:
    - cron: "15 4 */3 * *"

env:
  IMAGE_OWNER: kimbtechnologies
  IMAGE_NAME: radio_api
  BASE_IMAGE: kimbtechnologies/php_nginx:latest 
  PLATFORMS: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/arm64

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    # Init and check

    - name: Check for new baseimage 
      id: check
      uses: lucacome/docker-image-update-checker@v1
      with:
        base-image: "${{env.BASE_IMAGE}}"
        image: "${{env.IMAGE_OWNER}}/${{env.IMAGE_NAME}}:latest"
      if: github.event_name != 'push'
    
    - name: Access repository contents
      uses: actions/checkout@v4
      if: ${{ (github.event_name == 'push') || (steps.check.outputs.needs-updating == 'true') }}
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      if: ${{ (github.event_name == 'push') || (steps.check.outputs.needs-updating == 'true') }}
    
    # Multi platform support

    - name: Set up QEMU for Docker Buildx
      uses: docker/setup-qemu-action@v3
      if: ${{ (github.event_name == 'push') || (steps.check.outputs.needs-updating == 'true') }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      if: ${{ (github.event_name == 'push') || (steps.check.outputs.needs-updating == 'true') }}
  
    # Multi platform image build and push

    - name: Build and push the latest Docker image
      run: docker buildx build --platform "$PLATFORMS" . --file "./utils/Dockerfile" --tag "$IMAGE_OWNER/$IMAGE_NAME:latest" --push
      if: ${{ (github.event_name == 'push') || (steps.check.outputs.needs-updating == 'true') }}
     
    - name: Push more tags
      if: ${{ (github.event_name == 'push') || (steps.check.outputs.needs-updating == 'true') }} 
      run: |
          cat VERSION | while read TAG; do
            if [[ $TAG =~ ^#.* ]] ; then 
              echo "Skipping $TAG";
            else 
              echo "Tagging image as $TAG and pushing";
              docker buildx build --platform "$PLATFORMS" . --file "./utils/Dockerfile" --tag "$IMAGE_OWNER/$IMAGE_NAME:$TAG" --push
            fi;
          done;
